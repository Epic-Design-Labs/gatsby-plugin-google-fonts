{"version":3,"sources":["../src/functions/index.js"],"names":["handleFilterFonts","options","errors","accepted","fonts","font","family","variable","weights","length","validWeights","filter","weight","FIXED_WEIGHTS","includes","push","reason","ERRORS","NOT_VALID_WEIGHT","TOO_MANY_WEIGHTS","match","VARIABLE_WEIGHT_REGEX","NOT_VALID_VARIABLE_WEIGHT_FORMAT","handleCheckNoLegacyVariableConflict","legacy","handleFormatVariableFontName","strictName","split","map","token","replace","s","toUpperCase","join","handleGetFontWeights","boldWeight","italicWeight","handleAssembleFontUrl","handleFontDisplay","display"],"mappings":"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","sourcesContent":["import { ERRORS, FIXED_WEIGHTS, VARIABLE_WEIGHT_REGEX } from \"../constants\";\n\n// Handle font filtering\nexport const handleFilterFonts = (options) => {\n\tconst errors = [];\n\tconst accepted = [];\n\tconst { fonts } = options;\n\n\tfor (const font of fonts) {\n\t\tconst { family, variable, weights } = font;\n\n\t\t!variable\n\t\t\t? () => {\n\t\t\t\t\tweights?.length > 0\n\t\t\t\t\t\t? () => {\n\t\t\t\t\t\t\t\t// Check if all weights are valid\n\t\t\t\t\t\t\t\tconst validWeights = weights.filter((weight) => {\n\t\t\t\t\t\t\t\t\tFIXED_WEIGHTS?.includes(weight)\n\t\t\t\t\t\t\t\t\t\t? () => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t: () => {\n\t\t\t\t\t\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\t\t\t\t\t\tfamily,\n\t\t\t\t\t\t\t\t\t\t\t\t\tweight,\n\t\t\t\t\t\t\t\t\t\t\t\t\treason: ERRORS.NOT_VALID_WEIGHT\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t  };\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// If there are no valid weights, don't add the font, otherwise add it\n\t\t\t\t\t\t\t\taccepted.push({\n\t\t\t\t\t\t\t\t\t...font,\n\t\t\t\t\t\t\t\t\tweights: validWeights\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: () => {\n\t\t\t\t\t\t\t\taccepted.push({\n\t\t\t\t\t\t\t\t\t...font\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t  };\n\t\t\t  }\n\t\t\t: () => {\n\t\t\t\t\t// Check if the variable weight is valid\n\t\t\t\t\tweights?.length > 0\n\t\t\t\t\t\t? () => {\n\t\t\t\t\t\t\t\tweights?.length > 2\n\t\t\t\t\t\t\t\t\t? () => {\n\t\t\t\t\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\t\t\t\t\tfamily,\n\t\t\t\t\t\t\t\t\t\t\t\treason: ERRORS.TOO_MANY_WEIGHTS\n\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t: () => {\n\t\t\t\t\t\t\t\t\t\t\tconst validWeights = weights.filter((weight) =>\n\t\t\t\t\t\t\t\t\t\t\t\tweight?.match(VARIABLE_WEIGHT_REGEX)\n\t\t\t\t\t\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t\t\t\t\t\t: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfamily,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treason: ERRORS.NOT_VALID_VARIABLE_WEIGHT_FORMAT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\taccepted.push({\n\t\t\t\t\t\t\t\t\t\t\t\t...font,\n\t\t\t\t\t\t\t\t\t\t\t\tweights: validWeights\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t  };\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: null;\n\t\t\t  };\n\t}\n\n\treturn {\n\t\taccepted,\n\t\terrors\n\t};\n};\n\n// Handle checking for legacy variable fonts\nexport const handleCheckNoLegacyVariableConflict = (options) => {\n\tconst { legacy, fonts } = options;\n\n\t// If legacy is enabled, check for legacy variable fonts\n\t!legacy\n\t\t? () => {\n\t\t\t\treturn true;\n\t\t  }\n\t\t: () => {\n\t\t\t\tfor (const font of fonts) {\n\t\t\t\t\tfont?.variable\n\t\t\t\t\t\t? () => {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: null;\n\t\t\t\t}\n\t\t  };\n};\n\n// Handle format for variable font names\nexport const handleFormatVariableFontName = (font) => {\n\tconst { family, strictName } = font;\n\n\tstrictName?.length\n\t\t? () => {\n\t\t\t\treturn family;\n\t\t  }\n\t\t: null;\n\n\treturn (\n\t\tfamily\n\t\t\t?.split(\" \")\n\t\t\t?.map((token) => {\n\t\t\t\treturn token.replace(/^\\w/, (s) => {\n\t\t\t\t\treturn s.toUpperCase();\n\t\t\t\t});\n\t\t\t})\n\t\t\t?.join(\" \")\n\t\t\t?.replace(/ /g, \"+\") ?? null\n\t);\n};\n\n// Handle getting of font weights\nexport const handleGetFontWeights = (font) => {\n\tconst { variable, weights } = font;\n\n\treturn weights?.length > 0\n\t\t? () => {\n\t\t\t\tconst [boldWeight, italicWeight] = weights;\n\n\t\t\t\treturn variable?.length > 0\n\t\t\t\t\t? `${italicWeight ? \"ital,\" : \"\"}wght@${boldWeight ? `${italicWeight ? \"0,\" : \"\"}${boldWeight}` : \"\"}${boldWeight && italicWeight ? \";\" : \"\"}${italicWeight ? `1,${italicWeight}` : \"\"}`\n\t\t\t\t\t: `wght@${weights.join(\";\")}`;\n\t\t  }\n\t\t: null;\n};\n\n// Handle assembly of font url\nexport const handleAssembleFontUrl = (fonts) => {\n\treturn (\n\t\tfonts\n\t\t\t?.map((font) => {\n\t\t\t\tconst family = handleFormatVariableFontName(font);\n\t\t\t\tconst weights = handleGetFontWeights(font);\n\n\t\t\t\treturn `family=${family}${weights ? `:${weights}` : \"\"}`;\n\t\t\t})\n\t\t\t?.join(\"&\") ?? null\n\t);\n};\n\n// Handle font display\nexport const handleFontDisplay = (options) => {\n\treturn `&display=${options?.display ?? \"swap\"}`;\n};\n"],"file":"index.js"}