{"version":3,"sources":["../src/gatsby/onRenderBody.js"],"names":["onRenderBody","options","setHeadComponents","console","log","FG_RED","ERRORS","VARIABLE_LEGACY_CONFLICT","legacy","finalFonts","errors","length","verbose","fonts","accepted","link","BASE_URL","GOOGLE_API_VERSION_V2","key","href","rel"],"mappings":";;;;;;;;;;;AACA;;AACA;;AACA;;AAEO,IAAMA,YAAY;AAAA,wEAAG,uBAA8BC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,iBAAT,QAASA,iBAAT;AAI3B,aAAC,oDAAoCD,OAApC,CAAD,GACG,YAAM;AACN,qBAAOE,OAAO,CAACC,GAAR,CAAYC,iBAAZ,SAAyBC,kBAAOC,wBAAhC,CAAP;AACC,aAHJ,GAIG,IAJH;AAOA,aAACN,OAAO,CAACO,MAAT,GACG,YAAM;AAAA;;AACN,kBAAMC,UAAU,GAAG,kCAAkBR,OAAlB,CAAnB;AAEA,eAAAQ,UAAU,SAAV,IAAAA,UAAU,WAAV,kCAAAA,UAAU,CAAEC,MAAZ,0EAAoBC,MAApB,IAA6B,CAA7B,IAAkCV,OAAlC,aAAkCA,OAAlC,eAAkCA,OAAO,CAAEW,OAA3C,GACG,YAAM;AACN,uBAAO,YAAM;AACZT,kBAAAA,OAAO,CAACC,GAAR,CAAYC,iBAAZ,EAAoB,gDAApB;AACAF,kBAAAA,OAAO,CAACC,GAAR,CAAYC,iBAAZ,SAAyBI,UAAU,CAACC,MAApC;AACA,iBAHD;AAIC,eANJ,GAOG,IAPH;AASA,kBAAMG,KAAK,GAAG,8DAAsBJ,UAAtB,aAAsBA,UAAtB,uBAAsBA,UAAU,CAAEK,QAAlC,uEAA8C,IAA9C,CAAd;AAEAC,cAAAA,IAAI,GAAMC,sBAAWC,gCAAjB,SAA0CJ,KAA1C,GAAkDJ,UAAtD;AACC,aAhBJ,GAiBG,IAjBH;AAmBAP,YAAAA,iBAAiB,CAAC,CACjB,0BAAc,MAAd,EAAsB;AACrBgB,cAAAA,GAAG,EAAE,OADgB;AAErBC,cAAAA,IAAI,EAAEJ,IAFe;AAGrBK,cAAAA,GAAG,EAAE;AAHgB,aAAtB,CADiB,CAAD,CAAjB;;AA9B2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZpB,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { createElement } from \"react\";\nimport { BASE_URL, ERRORS, FG_RED, GOOGLE_API_VERSION_V2 } from \"../constants\";\nimport { handleAssembleFontUrl, handleCheckNoLegacyVariableConflict, handleFilterFonts } from \"../functions\";\n\nexport const onRenderBody = async ({ setHeadComponents }, options) => {\n\tlet link;\n\n\t// if `legacy` mode was enabled and variable font request was found, exit immediately\n\t!handleCheckNoLegacyVariableConflict(options)\n\t\t? () => {\n\t\t\t\treturn console.log(FG_RED, `\\n${ERRORS.VARIABLE_LEGACY_CONFLICT}`);\n\t\t  }\n\t\t: null;\n\n\t// if `legacy` mode was not enabled, use v2 API and handle variable fonts\n\t!options.legacy\n\t\t? () => {\n\t\t\t\tconst finalFonts = handleFilterFonts(options);\n\n\t\t\t\tfinalFonts?.errors?.length > 0 && options?.verbose\n\t\t\t\t\t? () => {\n\t\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\t\tconsole.log(FG_RED, \"\\nThe following fonts/weights were not loaded.\");\n\t\t\t\t\t\t\t\tconsole.log(FG_RED, `\\n${finalFonts.errors}`);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t  }\n\t\t\t\t\t: null;\n\n\t\t\t\tconst fonts = handleAssembleFontUrl(finalFonts?.accepted ?? null);\n\n\t\t\t\tlink = `${BASE_URL + GOOGLE_API_VERSION_V2}?${fonts}${finalFonts}`;\n\t\t  }\n\t\t: null;\n\n\tsetHeadComponents([\n\t\tcreateElement(\"link\", {\n\t\t\tkey: \"fonts\",\n\t\t\thref: link,\n\t\t\trel: \"stylesheet\"\n\t\t})\n\t]);\n};\n"],"file":"onRenderBody.js"}